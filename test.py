import pygame
import pytmx
from map_config import map_configs


class TileMap:
    def __init__(self, filename):
        self.filename = filename
        self.tmx_data = pytmx.load_pygame(filename, pixelalpha=True)
        self.tile_width = self.tmx_data.tilewidth
        self.tile_height = self.tmx_data.tileheight
        self.width = self.tmx_data.width * self.tile_width
        self.height = self.tmx_data.height * self.tile_height

        self.config = map_configs.get(filename)
        if self.config is None:
            raise ValueError(f"[‚ùå] –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –¥–ª—è {filename}")

    def draw(self, surface, offset=pygame.Vector2(0, 0), skip_door_ids=None, show_tile_ids=False, allowed_gids=None):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω skip_door_ids ‚Äî –Ω–µ —Ä–∏—Å—É–µ—Ç –¥–≤–µ—Ä–∏ —Å —ç—Ç–∏–º–∏ id.
        –ü—Ä–∏ show_tile_ids=True –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç ID –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–ª–∞ –ø–æ–≤–µ—Ä—Ö –Ω–µ–≥–æ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
        –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω allowed_gids ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ GID."""
        if skip_door_ids is None:
            skip_door_ids = set()

        door_gids = self.config.get("door_gids", {}).keys()
        font = pygame.font.Font(None, 32) if show_tile_ids else None

        for layer in self.tmx_data.visible_layers:
            if isinstance(layer, pytmx.TiledTileLayer):
                for x, y, gid in layer:
                    if gid == 0:
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–≤–µ—Ä–∏
                    door_id = f"{x}_{y}"
                    if gid in door_gids:
                        if door_id in skip_door_ids:
                            continue

                    # –û—Å–Ω–æ–≤–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    tile = self.tmx_data.get_tile_image_by_gid(gid)
                    if tile:
                        pos_x = x * self.tile_width - offset.x
                        pos_y = y * self.tile_height - offset.y
                        surface.blit(tile, (pos_x, pos_y))

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID —Ç–∞–π–ª–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    if show_tile_ids and font:
                        if allowed_gids is None or gid in allowed_gids:
                            text = font.render(str(gid), True, (255, 0, 0))
                            surface.blit(text, (pos_x + 10, pos_y + 10))

    def get_collision_rects(self, layer_name="–°—Ç–µ–Ω—ã"):
        walls = []
        doors = []

        # üö´ GID, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (–Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–æ–ª–ª–∏–∑–∏–∏)
        non_collidable_gids = {109, 110, 111, 112, 113, 114, 115, 116}

        door_gids = self.config.get("door_gids", {}).keys()
        processed_doors = set()

        layer = self.tmx_data.get_layer_by_name(layer_name)
        open_gids = self.config.get("open_gids", {})
        wall_hitboxes = self.config.get("wall_hitboxes", {})

        for x, y, gid in layer:
            if gid == 0 or gid in non_collidable_gids:
                continue

            tile_x = x * self.tile_width
            tile_y = y * self.tile_height
            w, h = self.tile_width, self.tile_height

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–≤–µ—Ä–µ–π
            if gid in door_gids:
                door_id = f"{x}_{y}"
                if door_id in processed_doors:
                    continue
                processed_doors.add(door_id)

                # –°–æ–∑–¥–∞–Ω–∏–µ —Ö–∏—Ç–±–æ–∫—Å–∞ –¥–ª—è –¥–≤–µ—Ä–∏
                door_type = self.config["door_gids"][gid][0]
                if door_type == "top":
                    rect = pygame.Rect(tile_x, tile_y, w, 13)
                elif door_type == "bottom":
                    rect = pygame.Rect(tile_x, tile_y + h - 13, w, 13)
                elif door_type == "right":
                    rect = pygame.Rect(tile_x + w - 13, tile_y, 13, h)
                elif door_type == "left":
                    rect = pygame.Rect(tile_x, tile_y, 13, h)

                doors.append({
                    "id": door_id,
                    "rect": rect,
                    "pos": (x, y),
                    "gid": gid,
                    "open_gid": open_gids.get(gid, gid),
                    "is_open": False
                })
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ–Ω –∏ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if gid in wall_hitboxes:
                for ox, oy, ww, hh in wall_hitboxes[gid]:
                    walls.append(pygame.Rect(
                        tile_x + ox,
                        tile_y + oy,
                        ww,
                        hh
                    ))
            else:
                walls.append(pygame.Rect(tile_x, tile_y, w, h))

        return walls, doors

    def get_closed_door_image(self, door):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –¥–≤–µ—Ä–∏ –ø–æ GID."""
        return self.tmx_data.get_tile_image_by_gid(door["gid"])

    def get_object_collision_rects(self, layer_name="–û–±—ä–µ–∫—Ç—ã"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏, –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—É–ª–∏."""
        object_rects = []
        bullet_blocking_rects = []

        non_collidable_gids = {109, 110, 111, 112, 113, 114, 115, 116}
        bullet_passable_gids = self.config.get("bullet_passable_gids", set())
        gid_hitboxes = self.config.get("gid_hitboxes", {})

        try:
            layer = self.tmx_data.get_layer_by_name(layer_name)
        except Exception as e:
            print(f"[‚ùå] –û—à–∏–±–∫–∞: —Å–ª–æ–π '{layer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî {e}")
            return [], []

        if not isinstance(layer, pytmx.TiledTileLayer):
            print(f"[‚ùå] –°–ª–æ–π '{layer_name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∞–π–ª–æ–≤—ã–º —Å–ª–æ–µ–º!")
            return [], []

        for x, y, gid in layer:
            if gid == 0 or gid in non_collidable_gids:
                continue

            tile_x = x * self.tile_width
            tile_y = y * self.tile_height

            if gid in gid_hitboxes:
                w, h, ox, oy = gid_hitboxes[gid]
                rect = pygame.Rect(tile_x + ox, tile_y + self.tile_height - h + oy, w, h)
            else:
                rect = pygame.Rect(tile_x, tile_y, self.tile_width, self.tile_height)

            object_rects.append(rect)
            if gid not in bullet_passable_gids:
                bullet_blocking_rects.append(rect)

        return object_rects, bullet_blocking_rects

    def print_unique_gids(self):
        unique_gids = set()

        for layer in self.tmx_data.visible_layers:
            if isinstance(layer, pytmx.TiledTileLayer):
                for _, _, gid in layer:
                    if gid != 0:
                        unique_gids.add(gid)

        print("[üì¶] –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ GID –Ω–∞ –∫–∞—Ä—Ç–µ:")
        for gid in sorted(unique_gids):
            print(f"GID: {gid}")
