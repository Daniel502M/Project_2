import pygame
import sys
import random

from settings import WIDTH, HEIGHT, FPS
from player import Player
from enemy import Enemy
from bullet import Bullet
from pickup import AmmoPickup
from map_loader import TileMap

pygame.init()
pygame.mixer.init()  # üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—à–µ—Ä–∞

# # üéµ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
# pygame.mixer.music.load("Zombie_Games_Sound.mp3")
# pygame.mixer.music.set_volume(0.3)
# pygame.mixer.music.play(-1)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
clock = pygame.time.Clock()
pygame.mouse.set_visible(False)

tile_map = TileMap("Maps/Laboratory_Cart/Laboratory_Cart..tmx")
static_obstacles, door_obstacles = tile_map.get_collision_rects()
object_obstacles = tile_map.get_object_collision_rects()
static_obstacles += object_obstacles

# –≠—Ç–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏—è—Ö
active_obstacles = static_obstacles.copy()

# –ü—Ä–∏—Ü–µ–ª
crosshair_surface = pygame.Surface((40, 40), pygame.SRCALPHA)
pygame.draw.circle(crosshair_surface, (255, 0, 0), (20, 20), 15, 2)

# –ò–≥—Ä–æ–∫ –∏ –≥—Ä—É–ø–ø—ã
map_pixel_width = tile_map.tmx_data.width * tile_map.tmx_data.tilewidth
map_pixel_height = tile_map.tmx_data.height * tile_map.tmx_data.tileheight

player = Player((map_pixel_width // 2, map_pixel_height - 100))

player_group = pygame.sprite.GroupSingle(player)
bullets = pygame.sprite.Group()
enemies = pygame.sprite.Group()
pickups = pygame.sprite.Group()

# –°—á—ë—Ç—á–∏–∫–∏
kills = 0
start_time = pygame.time.get_ticks()

# –°–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤
SPAWN_EVENT = pygame.USEREVENT + 1
pygame.time.set_timer(SPAWN_EVENT, 2000)
enemy = Enemy(player.rect, WIDTH, HEIGHT)
font = pygame.font.SysFont(None, 30)

# –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
while True:
    dt = clock.tick(FPS)
    keys = pygame.key.get_pressed()
    mouse_pos = pygame.mouse.get_pos()
    enemies.update(player, active_obstacles)
    delta_time = clock.tick(60) / 1000

    interacting_door = None
    for door in door_obstacles:
        if player.rect.colliderect(door["rect"]):
            interacting_door = door
            break

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å–º–∏
    if interacting_door:
        active_obstacles = static_obstacles.copy()  # –£–±–∏—Ä–∞–µ–º —ç—Ç—É –¥–≤–µ—Ä—å
        # –ú–æ–∂–µ—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å `open_doors = set()` –∏ –¥–æ–±–∞–≤–ª—è—Ç—å `interacting_door["id"]`
    else:
        active_obstacles = static_obstacles + [door["rect"] for door in door_obstacles]

    # –°–æ–±—ã—Ç–∏—è
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            pygame.quit()
            sys.exit()
        if event.type == SPAWN_EVENT:
            enemies.add(Enemy(player.rect, WIDTH, HEIGHT))
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                player.shooting = True
        if event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1:
                player.shooting = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_e:
                # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–µ—Ä—Ö—É)
                new_enemy = Enemy((player.rect.centerx, player.rect.centery - 100))

    # –ö–∞–º–µ—Ä–∞
    offset = pygame.Vector2(player.rect.center) - pygame.Vector2(WIDTH // 2, HEIGHT // 2)

    # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –º—ã—à–∏
    mouse_world_pos = (mouse_pos[0] + offset.x, mouse_pos[1] + offset.y)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
    player.update(keys, mouse_world_pos, bullets, active_obstacles)
    bullets.update(active_obstacles)
    enemies.update(player, active_obstacles)
    pickups.update()

    # –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
    for bullet in bullets:
        hit_list = pygame.sprite.spritecollide(bullet, enemies, False)
        for enemy in hit_list:
            line_blocked = any(obs.clipline(bullet.rect.center, enemy.rect.center) for obs in active_obstacles)
            if line_blocked:
                continue  # –ù–µ –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω ‚Äî –º–µ–∂–¥—É –ø—É–ª–µ–π –∏ –≤—Ä–∞–≥–æ–º —Å—Ç–µ–Ω–∞

            enemy.health -= 25
            bullet.kill()
            if enemy.health <= 0:
                pickups.add(AmmoPickup(enemy.rect.center))
                enemy.kill()
                kills += 1

    for enemy in enemies:
        if player.hitbox.colliderect(enemy.hitbox):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Å—Ç–µ–Ω—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –≤—Ä–∞–≥–æ–º
            blocked = False
            for obs in active_obstacles:
                if obs.clipline(player.hitbox.center, enemy.hitbox.center):
                    blocked = True
                    break
            if not blocked:
                player.take_damage(1)
                break  # –£—Ä–æ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç –æ–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –∑–∞ –∫–∞–¥—Ä

    pickup_hits = pygame.sprite.spritecollide(player, pickups, True)
    for pickup in pickup_hits:
        player.ammo += 5

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
    screen.fill((30, 30, 30))

    # –†–∏—Å—É–µ–º –∫–∞—Ä—Ç—É —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º –∫–∞–º–µ—Ä—ã
    tile_map.draw(screen, offset)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å—Ç–µ–Ω –∏ –¥–≤–µ—Ä–µ–π:
    for rect in active_obstacles:
        pygame.draw.rect(screen, (0, 0, 255), rect.move(-offset), 2)  # –°–∏–Ω–∏–µ —Ä–∞–º–∫–∏

    # for rect in object_obstacles:
    #     pygame.draw.rect(screen, (255, 255, 0), rect.move(-offset), 2)  # –ñ–µ–ª—Ç—ã–µ —Ä–∞–º–∫–∏

    # –†–∏—Å—É–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ —Å–¥–≤–∏–≥–æ–º offset
    for pickup in pickups:
        screen.blit(pickup.image, pickup.rect.topleft - offset)

    for bullet in bullets:
        screen.blit(bullet.image, bullet.rect.topleft - offset)

    for enemy in enemies:
        screen.blit(enemy.image, enemy.rect.topleft - offset)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–∞ –≤—Ä–∞–≥–∞:
    # pygame.draw.rect(screen, (255, 0, 0), enemy.hitbox.move(-offset), 2)

    screen.blit(player.image, player.rect.topleft - offset)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–∞ –∏–≥—Ä–æ–∫–∞:
    # player.draw_hitbox(screen, offset)

    # –ü—Ä–∏—Ü–µ–ª
    screen.blit(crosshair_surface, (mouse_pos[0] - 20, mouse_pos[1] - 20))

    # HUD
    ammo_text = font.render(f"Ammo: {player.ammo}", True, (255, 255, 255))
    health_text = font.render(f"Health: {player.health}", True, (255, 0, 0))
    time_text = font.render(f"Survived: {(pygame.time.get_ticks() - start_time) // 1000}s", True, (255, 255, 255))
    kills_text = font.render(f"Kills: {kills}", True, (255, 255, 255))
    enemies_text = font.render(f"Enemies: {len(enemies)}", True, (255, 255, 255))

    screen.blit(ammo_text, (10, 10))
    screen.blit(health_text, (10, 40))
    screen.blit(time_text, (10, 70))
    screen.blit(kills_text, (10, 100))
    screen.blit(enemies_text, (10, 130))

    # –ú–∏–Ω–∏-–∫–∞—Ä—Ç–∞
    mini_map_rect = pygame.Rect(WIDTH - 110, 10, 100, 100)
    pygame.draw.rect(screen, (50, 50, 50), mini_map_rect, border_radius=4)
    pygame.draw.rect(screen, (255, 255, 255), mini_map_rect, 2, border_radius=4)

    # –†–∞–∑–º–µ—Ä –º–∏–Ω–∏-–∫–∞—Ä—Ç—ã –∏ –µ—ë –º–∞—Å—à—Ç–∞–± –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
    MINI_MAP_SCALE = 0.1  # –ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –±–æ–ª—å—à–µ –æ–±–ª–∞—Å—Ç—å –æ—Ö–≤–∞—Ç–∞ –Ω–∞ –º–∏–Ω–∏–∫–∞—Ä—Ç–µ
    MAP_VIEW_SIZE = 1000  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ –Ω–∞ –º–∏–Ω–∏–∫–∞—Ä—Ç–µ

    center_x, center_y = player.rect.center

    # –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –º–∏–Ω–∏–∫–∞—Ä—Ç—ã
    pygame.draw.circle(screen, (0, 255, 0), (mini_map_rect.centerx, mini_map_rect.centery), 3)

    # –†–∏—Å—É–µ–º –≤—Ä–∞–≥–æ–≤
    for enemy in enemies:
        dx = enemy.rect.centerx - center_x
        dy = enemy.rect.centery - center_y

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        map_x = mini_map_rect.centerx + int(dx * MINI_MAP_SCALE)
        map_y = mini_map_rect.centery + int(dy * MINI_MAP_SCALE)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤—Ä–∞–≥–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏–Ω–∏–∫–∞—Ä—Ç—ã
        if mini_map_rect.collidepoint(map_x, map_y):
            pygame.draw.circle(screen, (255, 0, 0), (map_x, map_y), 2)

    if player.alive:
        player.update(keys, mouse_world_pos, bullets, active_obstacles)
        bullets.update(active_obstacles)
        enemies.update(player, active_obstacles)
        pickups.update()
    else:
        game_over_font = pygame.font.SysFont(None, 72)
        text = game_over_font.render("GAME OVER", True, (255, 0, 0))
        screen.blit(text, (WIDTH // 2 - 150, HEIGHT // 2 - 36))
        pygame.display.flip()
        pygame.time.delay(3000)
        pygame.quit()
        sys.exit()

    pygame.display.update()
